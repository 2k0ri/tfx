// Copyright 2020 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package tfx.orchestration;

import "google/protobuf/descriptor.proto";
import "ml_metadata/proto/metadata_store.proto";

// PlaceholderExpression is used in DSL IR executor specs to represent
// information that is not available at the authoring time. It will be rendered
// at execution time to provide the needed information.
message PlaceholderExpression {
  oneof expression_type {
    ml_metadata.Value primitive_value = 1;
    Placeholder placeholder = 2;
    PlaceholderOperator operator = 3;
  }
}

// Placeholder operator helps extract or render placeholders.
message PlaceholderOperator {
  oneof operator_type {
    ArtifactUriOperator artifact_uri_op = 1;
    ConcatOperator concat_op = 2;
    IndexOperator index_op = 3;
    ProtoOperator proto_op = 4;
  }
}

// ArtifactUriOperator extracts the Artifact URI from a placeholder expression.
message ArtifactUriOperator {
  // Required. It must evaluates to an artifact.
  PlaceholderExpression expression = 1;

  // Optional. Needed if one artifact contains multiple splits.
  string split = 2;
}

// ConcatOperator concatenates multiple placeholders.
message ConcatOperator {
  // Required. The placeholders to be concatenated.
  repeated PlaceholderExpression expressions = 1;
}

// IndexOperator extracts an element at the index if the PlaceholderExpression
// evaluates to something repeated. For example, an INPUT_ARTIFACT or
// OUTPUT_ARTIFACT placeholder may contain multiple artifacts.
message IndexOperator {
  // Required. The placeholder expression must evaluate to something repeated.
  // Otherwise a runtime error may be thrown when evaluating this operator.
  PlaceholderExpression expression = 1;
  // Required. The element index to be accessed.
  int64 index = 2;
}

// ProtoOperator helps access information in PlaceholderExpression if it
// evaluates to a proto.
message ProtoOperator {
  message ProtoSchema {
    // Message type for the proto. It must exist in the file_descriptors below.
    string message_type = 1;
    // Definitions of all dependencies of the above message type.
    google.protobuf.FileDescriptorSet file_descriptors = 2;
  }

  // Required. An expression that evaluates to a proto type. Typically, this is
  // an EXEC_PROPERTY type placeholder.
  PlaceholderExpression expression = 1;

  // Required. Proto schema makes proto-valued placeholder expression
  // self-describing.
  ProtoSchema proto_schema = 2;

  // Optional. Access a field inside the proto, using proto notations.
  string proto_field_path = 3;
}

// Placeholder is an inseparable unit in a placeholder expression that
// pipeline information will be injected.
message Placeholder {
  // A Placeholder can represent an input artifact, an output artifact,
  // or an execution property.
  enum Type {
    INPUT_ARTIFACT = 0;
    OUTPUT_ARTIFACT = 1;
    EXEC_PROPERTY = 2;
  }
  // Required. Type of the placeholder.
  Type type = 1;

  // Required. Key to the placeholder.
  string key = 2;
}
